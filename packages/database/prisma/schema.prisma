// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  name         String
  email        String
  password     String
}

model Zap {
  id           String            @default(uuid()) @id
  triggerId    String
  trigger      Trigger?
  actions      Action[]
  ZapRun       ZapRun[]
}

model ZapRun {
  id           String            @id @default(uuid())
  zapId        String
  zap          Zap               @relation(fields: [zapId], references: [id], onDelete: Cascade)
  status       ZapStatus
  zapRunOutBox ZapRunOutBox?
  createdAt    DateTime          @default(now())
  metadata     Json
}

model ZapRunOutBox {
  id           String            @id @default(uuid())
  zapRunId     String            @unique
  zapRun       ZapRun            @relation(fields: [zapRunId], references: [id], onDelete: Cascade)
  status       ZapStatus
}

model Action {
  id           String            @id @default(uuid())
  zapId        String
  zap          Zap               @relation(fields: [zapId], references: [id])
  actionId     String            @unique
  type         AvailableAction    @relation(fields: [actionId], references: [id])
}

model AvailableAction {
  id           String            @id @default(uuid())
  actionId     String            @unique
  actionName   String

  Action       Action[]
}

model Trigger {
  id           String            @id @default(uuid())
  zapId        String            @unique
  triggerId    String            @unique
  type         AvailableTrigger  @relation(fields: [triggerId], references: [id])

  Zap          Zap               @relation(fields: [zapId], references: [id])
}

model AvailableTrigger {
  id           String            @id @default(uuid())
  triggerId    String            @unique
  triggerName  String  

  Trigger      Trigger[]
}



enum TriggerType {
  ZAP
  WEBHOOK
}

enum ZapStatus {
  PENDING
  PROCESSING
  COMPLETED
}